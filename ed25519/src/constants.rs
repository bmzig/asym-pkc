#![allow(dead_code)]

pub const GENERATOR_Y: [u8; 32] = [
    0x20, 0xAE, 0x19, 0xA1, 0xB8, 0xA0, 0x86, 0xB4, 
    0xE0, 0x1E, 0xDD, 0x2C, 0x77, 0x48, 0xD1, 0x4C, 
    0x92, 0x3D, 0x4D, 0x7E, 0x6D, 0x7C, 0x61, 0xB2, 
    0x29, 0xE9, 0xC5, 0xA2, 0x7E, 0xCE, 0xD3, 0xD9
];

pub const GENERATOR_X: [u8; 1] = [0x09];

pub const FIELD: [u8; 32] = [
    0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xED
];

/// Prime order. ED25519 order uses this prime with cofactor 8.
pub const PRIME_ORDER: [u8; 32] = [
    0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x14, 0xde, 0xf9, 0xde, 0xa2, 0xf7, 0x9c, 0xd6, 
    0x58, 0x12, 0x63, 0x1a, 0x5c, 0xf5, 0xd3, 0xed
];

/// 2^c * l where c = 3 and l = PRIME_ORDER
pub const COFACTORED_ORDER: [u8; 32] = [
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xA6, 0xF7, 0xCE, 0xF5, 0x17, 0xBC, 0xE6, 0xB2, 
    0xC0, 0x93, 0x18, 0xD2, 0xE7, 0xAE, 0x9F, 0x68
];

pub const INV_FACTOR: [u8; 32] = [
    0x70, 0xD9, 0x12, 0x0B, 0x9F, 0x5F, 0xF9, 0x44,
    0x2D, 0x84, 0xF7, 0x23, 0xFC, 0x03, 0xB0, 0x81,
    0x3A, 0x5E, 0x2C, 0x2E, 0xB4, 0x82, 0xE5, 0x7D,
    0x33, 0x91, 0xFB, 0x55, 0x00, 0xBA, 0x81, 0xE7
];

pub const EDWARDS_COEFFICIENT: [u8; 32] = [
    0x52, 0x03, 0x6C, 0xEE, 0x2B, 0x6F, 0xFE, 0x73, 
    0x8C, 0xC7, 0x40, 0x79, 0x77, 0x79, 0xE8, 0x98, 
    0x00, 0x70, 0x0A, 0x4D, 0x41, 0x41, 0xD8, 0xAB, 
    0x75, 0xEB, 0x4D, 0xCA, 0x13, 0x59, 0x78, 0xA3
];

// This is the scaling factor for the birational equivalence
pub const SCALING_FACTOR: [u8; 32] = [
    0x24, 0x4B, 0x67, 0x20, 0x6A, 0x3E, 0x5B, 0xA9,
    0xF8, 0x61, 0x81, 0x9B, 0x67, 0x05, 0x17, 0x01,
    0x28, 0x31, 0x38, 0xF9, 0xF2, 0x43, 0xD5, 0xA1,
    0x40, 0xB4, 0x04, 0xAF, 0xDB, 0x42, 0x68, 0xE9
];

pub const ED_GENX: [u8; 32] = [
    0x21, 0x69, 0x36, 0xD3, 0xCD, 0x6E, 0x53, 0xFE, 
    0xC0, 0xA4, 0xE2, 0x31, 0xFD, 0xD6, 0xDC, 0x5C, 
    0x69, 0x2C, 0xC7, 0x60, 0x95, 0x25, 0xA7, 0xB2, 
    0xC9, 0x56, 0x2D, 0x60, 0x8F, 0x25, 0xD5, 0x1A
];

pub const ED_GENY: [u8; 32] = [
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x58
];

/// This is just the little-endian counterpart of the above generator.
pub const COMPRESSED_EDWARDS_Y: [u8; 32] = [
    0x58, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66,
    0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66
];
